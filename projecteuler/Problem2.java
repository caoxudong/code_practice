/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
 * By starting with 1 and 2, the first 10 terms will be: 
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... 
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
 * find the sum of the even-valued terms.
 */

package problem;

import java.util.HashMap;
import java.util.Map;

public class Problem2 {
    
    private static Map<Integer, Integer> fibonacciMap = new HashMap<>();

    public static void main(String[] args) {
        int sum = 0;
        int i = 1;
        int term = 1;
        while (term < 4000000) {
            if (term % 2 == 0) {
                sum += term;
            }
            term = fibonacci(i + 1);
            i++;
            System.out.println(term);
        }
        System.out.println(sum);
    }
    
    private static int fibonacci(int n){
        Integer cachedValue = fibonacciMap.get(n);
        if (cachedValue == null) {
            int result = 1;
            if (n == 0) {
                result = 0;
            } else if (n == 1) {
                result = 1;
            } else {
                result = fibonacci(n - 2) + fibonacci(n - 1);
            }
            fibonacciMap.put(n, result);
            return result;
        } else {
            return cachedValue.intValue();
        }
    }

}
